#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master

#shallow_clone: true

image: Visual Studio 2019

# scripts that are called at very beginning, before repo cloning
init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  # for clarity, don't use extra bat files
  #- CALL c:\projects\sonnet\appveyor-install.bat
  - git clone --depth 1 https://github.com/jhmgoossens/BuildTools.git -b master C:\projects\BuildTools
  - git clone --depth 1 https://github.com/jhmgoossens/Cbc.git -b dev C:\projects\Cbc
  - git clone --depth 1 https://github.com/jhmgoossens/Clp.git -b dev C:\projects\Clp
  - git clone --depth 1 https://github.com/jhmgoossens/Cgl.git -b dev C:\projects\Cgl
  - git clone --depth 1 https://github.com/jhmgoossens/CoinUtils.git -b dev C:\projects\CoinUtils
  - git clone --depth 1 https://github.com/jhmgoossens/Osi.git -b dev C:\projects\Osi
  - if %APPVEYOR_REPO_TAG%==true ( set RELEASE_NAME=Sonnet-%APPVEYOR_REPO_TAG_NAME% ) else set RELEASE_NAME=Sonnet-%APPVEYOR_REPO_BRANCH%-CI

# enable patching of AssemblyInfo.* files
#assembly_info:
#  patch: true
#  file: AssemblyInfo.*
#  assembly_version: "2.2.{build}"
#  assembly_file_version: "{version}"
#  assembly_informational_version: "{version}"

#---------------------------------#
#       build configuration       #
#---------------------------------#
# We do this manually using msbuild, such that in one job we could do multiple Configurations

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
# to add several platforms to build matrix:

#platform:
#  - x86
#  - x64
# build Configuration, i.e. Debug, Release, etc.
#configuration:
#  - Release
#build:
#  parallel: true                  # enable MSBuild parallel builds
#  project: c:\projects\sonnet\MSVisualStudio\v16\Sonnet.sln # path to Visual Studio solution or project

before_build:
  - echo "RELEASE_NAME:" %RELEASE_NAME%

build_script:
#  - MSBuild MSVisualStudio\v16\Sonnet.sln /p:Configuration=Release;Platform=x64
  - MSBuild MSVisualStudio\v16\Sonnet.sln /p:Configuration=Release;Platform=x86

after_build:
#  - mkdir package\x64
#  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\Sonnet.dll package\x64\.
#  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\Sonnet.xml package\x64\.
#  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\SonnetWrapper.dll package\x64\.
  - mkdir package\x86
  - copy MSVisualStudio\v16\Sonnet\bin\x86\Release\Sonnet.dll package\x86\.
  - copy MSVisualStudio\v16\Sonnet\bin\x86\Release\Sonnet.xml package\x86\.
  - copy MSVisualStudio\v16\Sonnet\bin\x86\Release\SonnetWrapper.dll package\x86\.
  - copy AUTHORS.txt package\.
  - copy CHANGELOG.txt package\.
  - copy INSTALL.txt package\.
  - copy LICENSE.txt package\.
  - copy README.txt package\.
  - copy examples\Example5.cs package\.
  - cd package
  - 7z a -tzip -r c:\projects\sonnet\%RELEASE_NAME%-bin.zip *
  - cd ..

test_script:
  - cd MSVisualStudio\v16\SonnetTest\bin\x86\Release
  - SonnetTest.exe

artifacts:
  - path: $(RELEASE_NAME)-bin.zip
    name: Sonnet

#deploy:
#  - provider: GitHub
#    tag: $(RELEASE_NAME)
#    release: $(RELEASE_NAME)
#    artifact: Sonnet
#   draft: false
#   prerelease: true
#    auth_token:
#      secure: 7rM8AX6MnUMN7F8Ad9BTvgRci9lmy4i3LWHC5l9ZdVY3xtJg7RwIXNWAg95vXFmK