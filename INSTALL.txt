http://sourceforge.net/projects/sonnet-project
http://www.coin-or.org

As mentioned in the README, SONNET consists of two libraries:

The SonnetWrapper is writen in C++/CLI
The SonnetWrapper library is built using the COIN-OR libraries BuildTools, Cbc, Cgl, Clp, CoinUtils, Osi and their dependencies.

Note that all these projects are also included as part of the Cbc tarball.
The SonnetWrapper solution refers to and builds all COIN dependencies and the SonnetWrapper project itself.
The COIN libraries are statically linked into the SonnetWrapper library.

Within SONNET, the main purpose of the SonnetWrapper library is to be use by the Sonnet library.
The SonnetWrapper can also be used as a stand-alone library to provide classic COIN functionality in .NET.

In contrast, the Sonnet library is writen in C#. This library uses a reference to the SonnetWrapper library.
Code is provided to perform various tests on the Sonnet library.

Getting the source code
---------------------
The latest SONNET sources can be downloaded from the Subversion repository from this link:

http://sourceforge.et/p/sonnet-project/code/HEAD/tree/
-> Download Snapshot (top right)

The downloaded zip file contains the Sonnet source code 
and MS Visual Studio 2010 solutions. It also includes several examples.

For SVN access, use
https://svn.code.sf.net/p/sonnet-project/code/Sonnet

Before you can build SONNET, the sources of the used COIN-OR libraries are also required.

Since the Cbc project has the same dependencies, you can download a Cbc source archive from
http://www.coin-or.org/download/source/Cbc/

SONNET has been tested to work with Cbc 2.9.3 sources.
From the archive, copy the folders BuildTools, Cbc, Cgl, Clp, CoinUtils and Osi
such that the Sonnet root directory is at the same level as Cbc, Clp etc.

Building SONNET
---------------------
The projects and solutions are provided for Visual Studio 2019 (MSVisualStudio\v16).
Older versions of projects and solutions files are available for Visual Studio 2010 (v10), but these are not maintained..

Visual Studio 2019


Signing assemblies
---------------------
To strongly name (sign) the Sonnet.dll and SonnetWrapper.dll there are two options:
1) Build the source code using your own key, or
2) Use ILMERGE 
ilmerge Weak.dll /keyfile:key.snk /out:Strong.dll
See http://www.microsoft.com/download/en/details.aspx?id=17630
