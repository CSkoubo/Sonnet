https://github.com/coin-or/SONNET
http://www.coin-or.org

As mentioned in the README, Sonnet consists of two libraries:

The SonnetWrapper is writen in C++/CLI
The SonnetWrapper library is built using the COIN-OR libraries BuildTools, Cbc, Cgl, Clp, CoinUtils, Osi and their dependencies.

See also below Building Sonnet.
The SonnetWrapper library refers to and builds all COIN-OR dependencies and the SonnetWrapper project itself.
The COIN-OR libraries are statically linked into the SonnetWrapper library.

Within Sonnet, the main purpose of the SonnetWrapper library is to be use by the Sonnet library.
The SonnetWrapper can also be used as a stand-alone library to provide classic COIN-OR functionality in .NET.

In contrast, the Sonnet library is writen in C#. This library uses a reference to the SonnetWrapper library.
Code is provided to perform various tests on the Sonnet library.

Getting the source code
---------------------
Option 1: Get the full src.zip artifact from AppVeyor (if available)
The easiest way to get started with Sonnet source code is to use the ..-src.zip artefact (if available) from the latest AppVeyor build
https://ci.appveyor.com/project/coin-or/sonnet/build/artifacts
This zip contains the Sonnet sources as well as all the relevant COIN-OR dependencies from their master branch. 
Simply unzip, open the Sonnet solution in sonnet\MSVisualStudio\v16\Sonnet.sln, and Build. 
Unfortunately, AppVeyor only keeps the artefacts for one month after the build.

Option 2: Get sources from github.com
The latest Sonnet sources can be downloaded from the github repository
https://github.com/coin-or/Sonnet
If you use "Download ZIP", the downloaded zip file contains the Sonnet source code and MS Visual Studio 2019 solution. 
Before you can build Sonnet, the sources of the master branches of all the relevant COIN-OR dependencies are also required. 
See https://github.com/coin-or/Cbc#source how to get the relevant sources. 
Ensure that the Sonnet directory is at the same level as Cbc, Clp, etc.

Building Sonnet
---------------------
The Sonnet projects and solution are provided for Visual Studio 2019 (MSVisualStudio\v16).
The Sonnet solution for Visual Studio 2019 refers to the project files of the relevant COIN-OR libraries.

Older versions of Sonnet projects and solutions files are available for Visual Studio 2010 (v10), but these are not maintained.

About x64 or Win32/x86
-------------------------
Specific builds are required for x86 or x64, in particular for SonnetWrapper.dll.
Since the C++/CLI of SonnetWraper.dll has no "AnyCPU" equivalent, it is NOT possible to use 
the x86 and/or x64 Sonnet.dll and SonnetWrapper.dll in an "AnyCPU" project. The project has to target x86 or x64. 

Strongly naming / Signing assemblies
---------------------
To strongly name (sign) the Sonnet.dll and SonnetWrapper.dll there are two options:
1) Build the source code using your own key, or
2) Use ILMERGE 
ilmerge Weak.dll /keyfile:key.snk /out:Strong.dll
See http://www.microsoft.com/download/en/details.aspx?id=17630

About additional functionality
-------------------------
Several parts of the source code have been disabled because they require, e.g., non-standard COIN-OR code.
SONNET_LEANLOADPROBLEM (Solver.cs, See also SonnetWrapper)
  Especially for CLP, this functionality loads problems more efficiently but requires 
  non-standard osiClp code. This is really only interesting for large problems (>100K var/con)
  If SONNET_LEANLOADPROBLEM is defined, then two additional member functions of SonnetWrapper's OsiClpSolverInterface are defined
	- LeanLoadProblemInit
	- LeanLoadProblem
  and one extra member function must be added for normal OsiClpSolverInterface
	- loadCurrentProblem
SONNET_USE_SEMICONTVAR (Solver.cs)
  Unfinished code for adding a variable type of SemiContinuousVariable, and automatically generate
  helper variable (binary) and constraint.
SONNET_SETWARMROWPRICE (WarmStart.cs)
  Whether or not to include row price information in WarmStart

